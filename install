#!/usr/bin/env python3

import os
import shutil
from typing import NoReturn
import subprocess
import platform

REPO_URL = "https://github.com/gertjan84/lms-rust-cli/releases/latest/download/lms"


def die(message: str) -> NoReturn:
    """
    Quit program with error.

    Args:
        message (str): The error message to display before exiting.
    """
    print(f"[ERROR]: {message}")
    exit(1)


def lprint(message: str) -> None:
    """
    Lazy print with format.

    Args:
        message (str): The message to print.
    """
    print(f"{message} ...", end="", flush=True)


def execute(commands: list[str], err_message: str) -> None:
    """
    Execute a list of commands.

    Args:
        commands (list[str]): A list of commands to execute.
        message (str): A message to display in case of failure.

    Returns:
        None

    Note:
        This function runs the specified commands using subprocess.run().
        It redirects the standard output and standard error streams to DEVNULL,
        and does not raise an exception if the process returns a non-zero exit status.
        If the process returns a non-zero exit status, it calls the die() function with the provided message.
    """
    process_exe = subprocess.run(
        commands,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=False,
    )

    if process_exe == 1:  # type: ignore
        die(err_message)


def main():
    print(r"""
                             /$$       /$$      /$$  /$$$$$$
                            | $$      | $$$    /$$$ /$$__  $$
                            | $$      | $$$$  /$$$$| $$  \__/
                            | $$      | $$ $$/$$ $$|  $$$$$$
                            | $$      | $$  $$$| $$ \____  $$
                            | $$      | $$\  $ | $$ /$$  \ $$
                            | $$$$$$$$| $$ \/  | $$|  $$$$$$/
                            |________/|__/     |__/ \______/
                                 
    """)

    exe_name = ""
    bin_dir = f"{os.getenv('HOME')}/.local/bin"

    match platform.system().lower():
        case "darwin":
            exe_name = "mac_arm64" if platform.machine().lower() == "arm64" else "mac_x64"
        case "linux":
            exe_name = "linux_arm64" if platform.machine().lower() == "arm64" else "linux_x64"
        case _:
            die(f"Your platform is not supported:{platform.system()}")

    wget_installed = shutil.which("wget")
    curl_installed = shutil.which("curl")

    if not wget_installed and not curl_installed:
        die("You need either wget or curl to install lms")

    install_mod = os.path.join(bin_dir, "lms")

    lprint("Downloading")
    os.makedirs(bin_dir, exist_ok=True)
    if curl_installed:
        execute(
            ["curl", "-sSL", install_mod, f"{REPO_URL}_{exe_name}"],
            "Cant find curl",
        )
    elif wget_installed:
         execute(
             ["wget", "-q", "-O", install_mod, f"{REPO_URL}_{exe_name}"],
             "Cant find wget",
         )
    else:
        die("You need either wget or curl to install lms")

    os.chmod(install_mod, 755)

    print(" done")

    if path := os.getenv("PATH"):  # noqa: SIM102
        if os.path.expanduser(bin_dir) in path:
            print("\nInstallation complete")
            return

        print(f"This system doesn't have {bin_dir} in its PATH.")
        print("  Add this before running lms")

        if shell := os.getenv("SHELL"):  # noqa: SIM102

            print("Execute this command to add lms to your path")
            match shell.split("/")[-1]:
                case "zsh":
                    print(f"echo path += '{bin_dir}' >> ~/.zshrc")
                    print("echo EXPORT PATH >> ~/.zshrc")
                case "bash":
                    print(f"echo PATH={bin_dir}:$PATH >> ~/.bashrc")
                case _:
                    die(f"You need to add {bin_dir} to your shell")

if __name__ == "__main__":
    main()
