#!/usr/bin/env python3

import os
import shutil
from typing import NoReturn
import subprocess

REPO_URL = "https://gitlab.com/gj-535479/lms-rust-cli"
EXE_NAME = "lms"
TMP_LOC = "/tmp/lms_rust"


def die(message: str) -> NoReturn:
    """
    Quit program with error.

    Args:
        message (str): The error message to display before exiting.
    """
    print(message)
    exit(1)


def lprint(message: str) -> None:
    """
    Lazy print with format.

    Args:
        message (str): The message to print.
    """
    print(f"{message} ...", end="", flush=True)


def user_choice(message: str) -> bool:
    """
    Get user choice Y/n default: Y.

    Args:
        message (str): The message to prompt the user.

    Returns:
        bool: True if user input is 'y' or empty, False if input is 'n'
    """
    valid_choice = ["y", "n", ""]

    while True:
        user_input = input(f"{message} [Y/n]: ").lower()
        if user_input in valid_choice:
            return user_input != "n"


def main():
    if not shutil.which("git"):
        die("You don't have Git installed. Please install Git.")

    if os.path.exists(TMP_LOC):
        if not user_choice("Would you like to remove the lms-rust temporary location?"):
            die(f"Please remove {TMP_LOC}")
        shutil.rmtree(TMP_LOC)

    lprint("Downloading")
    os.makedirs(TMP_LOC, exist_ok=True)
    subprocess.run(
        ["git", "clone", REPO_URL, TMP_LOC],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=True,
    )
    print(" done")

    lprint("Compiling")
    subprocess.run(
        ["cargo", "build", "--release", "--quiet"],
        cwd=TMP_LOC,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=True,
    )
    print(" done")

    lprint("Organizing file system")
    os.makedirs(os.path.expanduser("~/.local/bin"), exist_ok=True)
    shutil.copy(
        os.path.join(TMP_LOC, "target", "release", EXE_NAME),
        os.path.expanduser(f"~/.local/bin/{EXE_NAME}"),
    )
    shutil.rmtree(TMP_LOC, ignore_errors=True)
    print(" done")

    if os.path.expanduser("~/.local/bin") not in os.getenv("PATH"):
        print("This system doesn't have $HOME/.local/bin in its PATH.")
        print("  Add this before running lms")

    print("\nInstallation complete")


if __name__ == "__main__":
    main()
